// UBViews.Query.Parser definition file.
// fsyacc --module UBViews.Query.Parser Parser.fsy

%{

open UBViews.Query.Ast

let toFilterValue s =
    match s with
    | _ when s = "topid" || s = "TOPID" 
        -> FilterValue.TOPID
    | _ when s = "docid" || s = "DOCID" 
        -> FilterValue.DOCID
    | _ when s = "seqid" || s = "SEQID" 
        -> FilterValue.SEQID
    | _ when s = "parid" || s = "PARID" 
        -> FilterValue.PARID
    | _ when s = "secid" || s = "SECID" 
        -> FilterValue.SECID
    | _ -> failwith "Unknown FilterType"

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token TILDE_OP RANGE_OP
%token <int> RVALUE
%token <string> TERM
%token <string> STERM
%token QUOTATION_MARK LEFT_PAREN RIGHT_PAREN LEFT_BRACKET RIGHT_BRACKET LEFT_CURLY RIGHT_CURLY
%token AND OR
%token <string> FILTERID	
%token FILTERBY TOPID DOCID SEQID PARID SECID
%token RANGEBY
%token EOF

%left FILTERBY FILTERID
%left RANGEBY Range
%left AND OR

// This is the type of the data produced by a 
// successful reduction of the 'start' symbol:
%type <Ast.Query list> start

%%

// Returns a list of query objects.
start: UserQuery { $1 }

UserQuery:
	| UserQuery EOF         { $1 }
	| SingleQuery           { [$1] }
	| UserQuery SingleQuery { $2 :: $1 }

SingleQuery:
	| TERM                                 { Term($1)         }
	| TILDE_OP TERM                        { STerm($2)        }
	| QUOTATION_MARK Phrase QUOTATION_MARK { Phrase($2)       }
	| LEFT_BRACKET CTerm RIGHT_BRACKET     { CTerm ($2)       }
	| SingleQuery AND SingleQuery          { And($1, $3)      }
	| SingleQuery OR SingleQuery           { Or($1, $3)       }
	| LEFT_PAREN SingleQuery RIGHT_PAREN   { SubQuery($2)     }
	| SingleQuery FILTERBY FilterId		   { FilterBy($1, toFilterValue($3) ) } 
	| SingleQuery RANGEBY Range			   { RangeBy($1, Range($3) ) }

FilterId:
	| FILTERID { $1 }

Phrase:
	| TERM        { [$1] }
	| Phrase TERM { $2 :: $1 }

CTerm:
	| TERM        { [$1] }
	| CTerm TERM { $2 :: $1 }

RValue:
	| RVALUE { $1 } // Matches a single integer value like "5" or "10"

Range:
	| LEFT_CURLY RValue RANGE_OP RValue RIGHT_CURLY  { $2 :: [$4] } // Matches a range like "1..10"